#!/usr/bin/env python3

import argparse
import datetime
import glob
import io
import os
import random
import subprocess
import tempfile
import time
import uuid
from threading import Thread

import boto3
import daemon


def monitor(paths):
    while True:
        try:
            subprocess.run(['tbplot'] + paths, check=True)
        except subprocess.CalledProcessError as e:
            print(e)
            exit()

        print("Uploading...")
        for f in glob.glob('*.png'):
            with open(f, 'rb') as fd:
                b = fd.read()
            s3.upload_fileobj(io.BytesIO(b), 'mrahtz-runs-2', os.path.basename(f), ExtraArgs={'ACL': 'public-read'})
        print("Sleeping...")
        stagger_minutes = random.randint(1, 5)
        time.sleep((5 + stagger_minutes) * 60)


def download_file(s3, filename, last_modified: datetime.datetime, target_dir):
    target_file = os.path.join(target_dir, filename)
    s3.download_file('mrahtz-runs-2', filename, target_file)
    last_modified_ns = last_modified.replace(tzinfo=datetime.timezone.utc).timestamp()
    os.utime(target_file, (last_modified_ns, last_modified_ns))


parser = argparse.ArgumentParser()
parser.add_argument('--foreground', action='store_true')
group = parser.add_mutually_exclusive_group()
group.add_argument('--get', action='store_true')
group.add_argument('--paths', nargs='+')
args = parser.parse_args()

session = boto3.Session(profile_name='runs_s3')
s3 = session.client('s3')
s3.list_objects(Bucket='mrahtz-runs-2')

if args.get:
    tmp_dir = tempfile.mkdtemp()
    print("Listing bucket...")
    files = s3.list_objects(Bucket='mrahtz-runs-2')
    threads = []
    print("Downloading files...")
    for content in files['Contents']:
        filename = content['Key']
        last_modified = content['LastModified']
        t = Thread(target=download_file, args=(s3, filename, last_modified, tmp_dir))
        threads.append(t)
        t.start()
    for t in threads:
        t.join()
    subprocess.run(['open', tmp_dir])
elif args.paths:
    if args.foreground:
        monitor(args.paths)
    else:
        name = str(uuid.uuid4())
        log_file = open('/tmp/runmon-' + name + '.log', 'w')
        with daemon.DaemonContext(stdout=log_file, stderr=log_file, working_directory=os.getcwd()):
            monitor(args.paths)
else:
    parser.print_help()
