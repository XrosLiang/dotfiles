#!/usr/bin/env python3

import argparse
import glob
import os
import random
import subprocess
import tempfile
import time
import uuid
from threading import Thread

import boto3
import daemon
from botocore import UNSIGNED
from botocore.config import Config


def monitor(paths):
    while True:
        try:
            subprocess.run(['tbplot'] + paths, check=True)
        except subprocess.CalledProcessError as e:
            print(e)
            exit()

        print("Uploading...")
        for f in glob.glob('*.png'):
            client.upload_file(f, 'mrahtz-runs-2', os.path.basename(f), ExtraArgs={'ACL': 'public-read'})
        print("Sleeping...")
        stagger_minutes = random.randint(1, 5)
        time.sleep((5 + stagger_minutes) * 60)


parser = argparse.ArgumentParser()
parser.add_argument('--foreground', action='store_true')
group = parser.add_mutually_exclusive_group()
group.add_argument('--get', action='store_true')
group.add_argument('--paths', nargs='+')
args = parser.parse_args()

if 'AWS_S3_ID' in os.environ:
    id = os.environ['AWS_S3_ID']
    key = os.environ['AWS_S3_KEY']
    client = boto3.client('s3', aws_access_key_id=id, aws_secret_access_key=key)
else:
    client = boto3.client('s3', config=Config(signature_version=UNSIGNED))
client.list_objects(Bucket='mrahtz-runs-2')

if args.get:
    tmp_dir = tempfile.mkdtemp()
    print("Listing bucket...")
    files = client.list_objects(Bucket='mrahtz-runs-2')
    threads = []
    print("Downloading files...")
    for key in files['Contents']:
        f = key['Key']
        t = Thread(target=lambda f=f: client.download_file('mrahtz-runs-2', f, os.path.join(tmp_dir, f)))
        threads.append(t)
        t.start()
    for t in threads:
        t.join()
    subprocess.run(['open', tmp_dir])
elif args.paths:
    if args.foreground:
        monitor(args.paths)
    else:
        name = str(uuid.uuid4())
        log_file = open('/tmp/runmon-' + name + '.log', 'w')
        with daemon.DaemonContext(stdout=log_file, stderr=log_file, working_directory=os.getcwd()):
            monitor(args.paths)
else:
    parser.print_help()
